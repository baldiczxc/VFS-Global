from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
import asyncio
import sqlite3
import datetime
from database import init_db
import logging

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from vfs_parser.monitoring import monitoring

BOT_TOKEN = ''

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class Registration(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_gender = State()
    waiting_for_passport = State()
    waiting_for_passport_date = State()
    waiting_for_email = State()
    waiting_for_phone = State()


# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–∑—ã ---
VISA_CATEGORIES = {
    "C": {
        "name": "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è (C)",
        "subcategories": {
            "C01": "–¢—É—Ä–∏–∑–º",
            "C02": "–î–µ–ª–æ–≤–∞—è",
            "C03": "–ì–æ—Å—Ç–µ–≤–∞—è",
            "C04": "–¢—Ä–∞–Ω–∑–∏—Ç",
            "C05": "–õ–µ—á–µ–Ω–∏–µ",
            "C06": "–£—á—ë–±–∞",
            "C07": "–°–ø–æ—Ä—Ç",
            "C08": "–ö—É–ª—å—Ç—É—Ä–∞",
            "C09": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è",
            "C10": "–í–æ–¥–∏—Ç–µ–ª—å",
            "C11": "–ß–ª–µ–Ω —Å–µ–º—å–∏ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ï–°",
            "C12": "–î—Ä—É–≥–æ–µ"
        }
    },
    "D": {
        "name": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è (D)",
        "subcategories": {
            "D01": "–†–∞–±–æ—Ç–∞",
            "D02": "–£—á—ë–±–∞",
            "D03": "–í–æ—Å—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ–º—å–∏",
            "D04": "–ë–∏–∑–Ω–µ—Å",
            "D05": "–î—Ä—É–≥–æ–µ"
        }
    },
    "A": {
        "name": "–ê—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤–∞—è (A)",
        "subcategories": {
            "A01": "–¢—Ä–∞–Ω–∑–∏—Ç —á–µ—Ä–µ–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç"
        }
    },
    "B": {
        "name": "–¢—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è (B)",
        "subcategories": {
            "B01": "–¢—Ä–∞–Ω–∑–∏—Ç"
        }
    },
    "LTV": {
        "name": "LTV (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—è)",
        "subcategories": {
            "LTV01": "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è",
            "LTV02": "–î—Ä—É–≥–æ–µ"
        }
    }
}

CITIES = [
    ("minsk", "–ú–∏–Ω—Å–∫"),
    ("brest", "–ë—Ä–µ—Å—Ç"),
    ("grodno", "–ì—Ä–æ–¥–Ω–æ"),
    ("vitebsk", "–í–∏—Ç–µ–±—Å–∫"),
    ("gomel", "–ì–æ–º–µ–ª—å"),
    ("mogilev", "–ú–æ–≥–∏–ª—ë–≤")
]

active_monitorings = {}
monitoring_flags = {}


class SettingsFSM(StatesGroup):
    waiting_for_city = State()
    waiting_for_category = State()
    waiting_for_subcategory = State()


def main_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
        InlineKeyboardButton(text="üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="verify")
    )
    builder.row(
        InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="monitoring")
    )
    return builder.as_markup()


def back_button():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    return builder.as_markup()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)


def log_active_user(user_id, username):
    import sqlite3
    import datetime
    now = datetime.datetime.now()
    date_str = now.strftime('%Y-%m-%d')
    hour = int(now.strftime('%H'))
    with sqlite3.connect('database.db') as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ª–æ–≥ –∑–∞ —ç—Ç–æ—Ç —á–∞—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        exists = conn.execute(
            "SELECT 1 FROM bookings WHERE user_id=? AND date=? AND hour=?",
            (user_id, date_str, hour)
        ).fetchone()
        if not exists:
            conn.execute(
                '''INSERT INTO bookings (user_id, username, attempts, successful, booking_time, hour, date)
                   VALUES (?, ?, ?, ?, ?, ?, ?)''',
                (user_id, username, 1, 0, now.isoformat(), hour, date_str)
            )
            conn.commit()


def log_error(error_message):
    now = datetime.datetime.now()
    with sqlite3.connect('database.db') as conn:
        conn.execute(
            'UPDATE metrics SET errors = errors + 1, last_updated = ? WHERE id = (SELECT id FROM metrics ORDER BY last_updated DESC LIMIT 1)',
            (now.isoformat(),)
        )
        conn.commit()
    logger.error(f"–û—à–∏–±–∫–∞: {error_message}")


@dp.message(CommandStart())
async def start(message: types.Message):
    log_active_user(message.from_user.id, message.from_user.username)
    logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")
    # handle_start(message.from_user.id, f"@{message.from_user.username}")  # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await message.answer("ü§ñ VFS Booking Bot", reply_markup=main_menu())


@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'")
    await state.clear()
    await callback.message.edit_text("ü§ñ VFS Booking Bot", reply_markup=main_menu())
    await callback.answer()


@dp.callback_query(F.data == "register")
async def register_start(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ):"
    )
    await callback.answer()
    await state.set_state(Registration.waiting_for_fullname)


@dp.message(Registration.waiting_for_fullname)
async def reg_fullname(message: types.Message, state: FSMContext):
    log_active_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –§–ò–û: {message.text.strip()}")
    await state.update_data(fullname=message.text.strip())
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
        InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=builder.as_markup())
    await state.set_state(Registration.waiting_for_gender)


@dp.callback_query(F.data.startswith("gender_"), Registration.waiting_for_gender)
async def reg_gender(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    gender = callback.data.split("_")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender}")
    await state.update_data(gender=gender)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:")
    await state.set_state(Registration.waiting_for_passport)
    await callback.answer()


@dp.message(Registration.waiting_for_passport)
async def reg_passport(message: types.Message, state: FSMContext):
    log_active_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –ø–∞—Å–ø–æ—Ä—Ç: {message.text.strip()}")
    await state.update_data(passport=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(Registration.waiting_for_passport_date)


@dp.message(Registration.waiting_for_passport_date)
async def reg_passport_date(message: types.Message, state: FSMContext):
    log_active_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞: {message.text.strip()}")
    await state.update_data(passport_date=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:")
    await state.set_state(Registration.waiting_for_email)


@dp.message(Registration.waiting_for_email)
async def reg_email(message: types.Message, state: FSMContext):
    log_active_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª email: {message.text.strip()}")
    await state.update_data(email=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    await state.set_state(Registration.waiting_for_phone)


@dp.message(Registration.waiting_for_phone)
async def reg_phone(message: types.Message, state: FSMContext):
    log_active_user(message.from_user.id, message.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {message.text.strip()}")
    await state.update_data(phone=message.text.strip())
    data = await state.get_data()
    logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {data}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()


@dp.callback_query(F.data == "verify")
async def verify_start(callback: types.CallbackQuery):
    log_active_user(callback.from_user.id, callback.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
    await callback.message.edit_text(
        "–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–º–µ—Ä—É-—Ç–µ—Å—Ç + –±–∏–æ–º–µ—Ç—Ä–∏—é:\nhttps://msivfs.com",
        reply_markup=back_button()
    )
    await callback.answer()


@dp.callback_query(F.data == "settings")
async def settings_start(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    builder = InlineKeyboardBuilder()
    for city_code, city_name in CITIES:
        builder.row(InlineKeyboardButton(text=city_name, callback_data=f"city_{city_code}"))
    builder.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SettingsFSM.waiting_for_city)
    await callback.answer()


@dp.callback_query(F.data.startswith("city_"), SettingsFSM.waiting_for_city)
async def choose_city(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    city_code = callback.data.split("_", 1)[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city_code}")
    await state.update_data(city=city_code)
    builder = InlineKeyboardBuilder()
    for cat_code, cat in VISA_CATEGORIES.items():
        builder.row(InlineKeyboardButton(text=cat['name'], callback_data=f"cat_{cat_code}"))
    builder.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∑—ã:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SettingsFSM.waiting_for_category)
    await callback.answer()


@dp.callback_query(F.data.startswith("cat_"), SettingsFSM.waiting_for_category)
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    cat_code = callback.data.split("_", 1)[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∑—ã: {cat_code}")
    await state.update_data(category=cat_code)
    builder = InlineKeyboardBuilder()
    for sub_code, sub_name in VISA_CATEGORIES[cat_code]["subcategories"].items():
        builder.row(InlineKeyboardButton(text=f"{sub_name} ({sub_code})", callback_data=f"sub_{sub_code}"))
    builder.row(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∑—ã:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SettingsFSM.waiting_for_subcategory)
    await callback.answer()


@dp.callback_query(F.data.startswith("sub_"), SettingsFSM.waiting_for_subcategory)
async def choose_subcategory(callback: types.CallbackQuery, state: FSMContext):
    log_active_user(callback.from_user.id, callback.from_user.username)
    sub_code = callback.data.split("_", 1)[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∑—ã: {sub_code}")
    await state.update_data(subcategory=sub_code)
    data = await state.get_data()
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {data}")
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"–ì–æ—Ä–æ–¥: {next(name for code, name in CITIES if code == data['city'])}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {VISA_CATEGORIES[data['category']]['name']} ({data['category']})\n"
        f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {VISA_CATEGORIES[data['category']]['subcategories'][data['subcategory']]} ({data['subcategory']})\n",
        reply_markup=main_menu()
    )
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "monitoring")
async def monitoring_start(callback: types.CallbackQuery):
    log_active_user(callback.from_user.id, callback.from_user.username)
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤")

    update_metrics(slots=1, users=1)
    update_status('Worker', 'ONLINE')

    await callback.message.edit_text(
        "–ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω 24/7. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=back_button()
    )
    await callback.answer()

    if active_monitorings.get(user_id):
        return

    monitoring_flags[user_id] = True

    async def background_monitoring():
        while monitoring_flags.get(user_id, False):
            logger.info(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –ó–∞–ø—É—Å–∫–∞—é monitoring...")
            try:
                loop = asyncio.get_event_loop()
                await loop.run_in_executor(None, monitoring)  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ –ø–æ—Ç–æ–∫–µ
            except Exception as e:
                logger.error(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ monitoring(): {e}")

            logger.info(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}] –ñ–¥—É 7 –º–∏–Ω—É—Ç...")
            await asyncio.sleep(420)

    task = asyncio.create_task(background_monitoring())
    active_monitorings[user_id] = task


def update_metrics(slots=0, users=0, success=0, errors=0):
    with sqlite3.connect('database.db') as conn:
        conn.execute('''
            INSERT INTO metrics (slots_checked, active_users, successful_records, errors, last_updated)
            VALUES (?, ?, ?, ?, ?)
        ''', (slots, users, success, errors, datetime.datetime.now().isoformat()))
        conn.commit()


def update_status(component, status):
    with sqlite3.connect('database.db') as conn:
        conn.execute('''
            INSERT OR REPLACE INTO system_status (component, status, last_updated)
            VALUES (?, ?, ?)
        ''', (component, status, datetime.datetime.now().isoformat()))
        conn.commit()


# def handle_start(user_id, username):
#     conn = sqlite3.connect('database.db')
#     now = datetime.datetime.now().isoformat()
#     # –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
#     conn.execute('''
#         INSERT INTO bookings (user_id, username, attempts, successful, booking_time, hour, date)
#         VALUES (?, ?, ?, ?, ?, ?, ?)
#     ''', (user_id, username, 1, 1, now, now[11:13], now[:10]))
#     conn.commit()
#     conn.close()

async def main():
    # Initialize database
    init_db()
    # Set initial system status
    update_status('API', 'ONLINE')
    update_status('DB', 'ONLINE')
    update_status('Worker', 'ONLINE')
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
    asyncio.run(main())
